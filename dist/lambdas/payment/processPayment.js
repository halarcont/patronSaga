"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const { DynamoDB } = require('aws-sdk');
exports.handler = async function (event) {
    console.log("request:", JSON.stringify(event, undefined, 2));
    let flightReservationID = '';
    if (typeof event.ReserveFlightResult !== 'undefined') {
        flightReservationID = event.ReserveFlightResult.Payload.booking_id;
    }
    let carReservationID = '';
    if (typeof event.ReserveCarRentalResult !== 'undefined') {
        flightReservationID = event.ReserveCarRentalResult.Payload.booking_id;
    }
    let paymentID = hashIt('' + flightReservationID + carReservationID);
    // Pass the parameter to fail this step 
    if (event.run_type === 'failPayment') {
        throw new Error('Failed to process payment');
    }
    // create AWS SDK clients
    const dynamo = new DynamoDB();
    var params = {
        TableName: process.env.TABLE_NAME,
        Item: {
            'pk': { S: event.trip_id },
            'sk': { S: paymentID },
            'trip_id': { S: event.trip_id },
            'id': { S: paymentID },
            'amount': { S: "750.00" },
            'currency': { S: "USD" },
            'transaction_status': { S: "confirmed" }
        }
    };
    // Call DynamoDB to add the item to the table
    let result = await dynamo.putItem(params).promise().catch((error) => {
        throw new Error(error);
    });
    console.log('Payment Processed Successfully:');
    console.log(result);
    // return status of ok
    return {
        status: "ok",
        payment_id: paymentID
    };
};
function hashIt(s) {
    let myHash;
    for (let i = 0; i < s.length; i++) {
        myHash = Math.imul(31, myHash) + s.charCodeAt(i) | 0;
    }
    return '' + Math.abs(myHash);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzc1BheW1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9sYW1iZGFzL3BheW1lbnQvcHJvY2Vzc1BheW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUczQixRQUFBLE9BQU8sR0FBRyxLQUFLLFdBQVUsS0FBUztJQUM3QyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU3RCxJQUFJLG1CQUFtQixHQUFHLEVBQUUsQ0FBQztJQUM3QixJQUFJLE9BQU8sS0FBSyxDQUFDLG1CQUFtQixLQUFLLFdBQVcsRUFBRTtRQUNwRCxtQkFBbUIsR0FBRyxLQUFLLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztLQUNwRTtJQUVELElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0lBQzFCLElBQUksT0FBTyxLQUFLLENBQUMsc0JBQXNCLEtBQUssV0FBVyxFQUFFO1FBQ3ZELG1CQUFtQixHQUFHLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO0tBQ3ZFO0lBR0QsSUFBSSxTQUFTLEdBQUcsTUFBTSxDQUFDLEVBQUUsR0FBQyxtQkFBbUIsR0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBRWhFLHdDQUF3QztJQUN4QyxJQUFHLEtBQUssQ0FBQyxRQUFRLEtBQUssYUFBYSxFQUFDO1FBQ2xDLE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztLQUM5QztJQUVELHlCQUF5QjtJQUN6QixNQUFNLE1BQU0sR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO0lBRTlCLElBQUksTUFBTSxHQUFHO1FBQ1QsU0FBUyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVTtRQUNqQyxJQUFJLEVBQUU7WUFDSixJQUFJLEVBQUcsRUFBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBQztZQUN6QixJQUFJLEVBQUcsRUFBQyxDQUFDLEVBQUUsU0FBUyxFQUFDO1lBQ3JCLFNBQVMsRUFBRyxFQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFDO1lBQzlCLElBQUksRUFBRSxFQUFDLENBQUMsRUFBRSxTQUFTLEVBQUM7WUFDcEIsUUFBUSxFQUFFLEVBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBQztZQUN2QixVQUFVLEVBQUUsRUFBQyxDQUFDLEVBQUUsS0FBSyxFQUFDO1lBQ3RCLG9CQUFvQixFQUFFLEVBQUMsQ0FBQyxFQUFFLFdBQVcsRUFBQztTQUN2QztLQUNGLENBQUM7SUFFSiw2Q0FBNkM7SUFDN0MsSUFBSSxNQUFNLEdBQUcsTUFBTSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO1FBQ3ZFLE1BQU0sSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekIsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLENBQUMsR0FBRyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7SUFDL0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVwQixzQkFBc0I7SUFDdEIsT0FBTztRQUNMLE1BQU0sRUFBRSxJQUFJO1FBQ1osVUFBVSxFQUFFLFNBQVM7S0FDdEIsQ0FBQTtBQUNILENBQUMsQ0FBQztBQUVGLFNBQVMsTUFBTSxDQUFDLENBQVE7SUFDdEIsSUFBSSxNQUFVLENBQUM7SUFFZixLQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBQztRQUMvQixNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDdEQ7SUFFRCxPQUFPLEVBQUUsR0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IER5bmFtb0RCIH0gPSByZXF1aXJlKCdhd3Mtc2RrJyk7XG5leHBvcnQge307XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgZnVuY3Rpb24oZXZlbnQ6YW55KSB7XG4gIGNvbnNvbGUubG9nKFwicmVxdWVzdDpcIiwgSlNPTi5zdHJpbmdpZnkoZXZlbnQsIHVuZGVmaW5lZCwgMikpO1xuXG4gIGxldCBmbGlnaHRSZXNlcnZhdGlvbklEID0gJyc7XG4gIGlmICh0eXBlb2YgZXZlbnQuUmVzZXJ2ZUZsaWdodFJlc3VsdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBmbGlnaHRSZXNlcnZhdGlvbklEID0gZXZlbnQuUmVzZXJ2ZUZsaWdodFJlc3VsdC5QYXlsb2FkLmJvb2tpbmdfaWQ7XG4gIH1cblxuICBsZXQgY2FyUmVzZXJ2YXRpb25JRCA9ICcnO1xuICBpZiAodHlwZW9mIGV2ZW50LlJlc2VydmVDYXJSZW50YWxSZXN1bHQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZmxpZ2h0UmVzZXJ2YXRpb25JRCA9IGV2ZW50LlJlc2VydmVDYXJSZW50YWxSZXN1bHQuUGF5bG9hZC5ib29raW5nX2lkO1xuICB9XG5cblxuICBsZXQgcGF5bWVudElEID0gaGFzaEl0KCcnK2ZsaWdodFJlc2VydmF0aW9uSUQrY2FyUmVzZXJ2YXRpb25JRCk7XG5cbiAgLy8gUGFzcyB0aGUgcGFyYW1ldGVyIHRvIGZhaWwgdGhpcyBzdGVwIFxuICBpZihldmVudC5ydW5fdHlwZSA9PT0gJ2ZhaWxQYXltZW50Jyl7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gcHJvY2VzcyBwYXltZW50Jyk7XG4gIH1cblxuICAvLyBjcmVhdGUgQVdTIFNESyBjbGllbnRzXG4gIGNvbnN0IGR5bmFtbyA9IG5ldyBEeW5hbW9EQigpO1xuXG4gIHZhciBwYXJhbXMgPSB7XG4gICAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LlRBQkxFX05BTUUsXG4gICAgICBJdGVtOiB7XG4gICAgICAgICdwaycgOiB7UzogZXZlbnQudHJpcF9pZH0sXG4gICAgICAgICdzaycgOiB7UzogcGF5bWVudElEfSxcbiAgICAgICAgJ3RyaXBfaWQnIDoge1M6IGV2ZW50LnRyaXBfaWR9LFxuICAgICAgICAnaWQnOiB7UzogcGF5bWVudElEfSxcbiAgICAgICAgJ2Ftb3VudCc6IHtTOiBcIjc1MC4wMFwifSxcbiAgICAgICAgJ2N1cnJlbmN5Jzoge1M6IFwiVVNEXCJ9LFxuICAgICAgICAndHJhbnNhY3Rpb25fc3RhdHVzJzoge1M6IFwiY29uZmlybWVkXCJ9XG4gICAgICB9XG4gICAgfTtcbiAgXG4gIC8vIENhbGwgRHluYW1vREIgdG8gYWRkIHRoZSBpdGVtIHRvIHRoZSB0YWJsZVxuICBsZXQgcmVzdWx0ID0gYXdhaXQgZHluYW1vLnB1dEl0ZW0ocGFyYW1zKS5wcm9taXNlKCkuY2F0Y2goKGVycm9yOiBhbnkpID0+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuICB9KTtcblxuICBjb25zb2xlLmxvZygnUGF5bWVudCBQcm9jZXNzZWQgU3VjY2Vzc2Z1bGx5OicpO1xuICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuXG4gIC8vIHJldHVybiBzdGF0dXMgb2Ygb2tcbiAgcmV0dXJuIHtcbiAgICBzdGF0dXM6IFwib2tcIixcbiAgICBwYXltZW50X2lkOiBwYXltZW50SURcbiAgfVxufTtcblxuZnVuY3Rpb24gaGFzaEl0KHM6c3RyaW5nKSB7XG4gIGxldCBteUhhc2g6YW55O1xuXG4gIGZvcihsZXQgaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSsrKXtcbiAgICBteUhhc2ggPSBNYXRoLmltdWwoMzEsIG15SGFzaCkgKyBzLmNoYXJDb2RlQXQoaSkgfCAwO1xuICB9XG5cbiAgcmV0dXJuICcnK01hdGguYWJzKG15SGFzaCk7XG59Il19