"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const { DynamoDB } = require('aws-sdk');
exports.handler = async function (event) {
    console.log("request:", JSON.stringify(event, undefined, 2));
    let carRentalReservationID = hashIt('' + event.rental_from + event.rental_to);
    console.log("carReservationID:", carRentalReservationID);
    // Pass the parameter to fail this step 
    if (event.run_type === 'failCarRentalReservation') {
        throw new Error('Failed to book the car rental');
    }
    // create AWS SDK clients
    const dynamo = new DynamoDB();
    var params = {
        TableName: process.env.TABLE_NAME,
        Item: {
            'pk': { S: event.trip_id },
            'sk': { S: carRentalReservationID },
            'trip_id': { S: event.trip_id },
            'id': { S: carRentalReservationID },
            'rental': { S: event.rental },
            'rental_from': { S: event.rental_from },
            'rental_to': { S: event.rental_to },
            'transaction_status': { S: 'pending' }
        }
    };
    // Call DynamoDB to add the item to the table
    let result = await dynamo.putItem(params).promise().catch((error) => {
        throw new Error(error);
    });
    console.log('inserted car rental reservation:');
    console.log(result);
    return {
        status: "ok",
        booking_id: carRentalReservationID
    };
};
function hashIt(s) {
    let myHash;
    for (let i = 0; i < s.length; i++) {
        myHash = Math.imul(31, myHash) + s.charCodeAt(i) | 0;
    }
    return '' + Math.abs(myHash);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzZXJ2ZVJlbnRhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xhbWJkYXMvcmVudGFscy9yZXNlcnZlUmVudGFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFHM0IsUUFBQSxPQUFPLEdBQUcsS0FBSyxXQUFVLEtBQVM7SUFDN0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFN0QsSUFBSSxzQkFBc0IsR0FBRyxNQUFNLENBQUMsRUFBRSxHQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUMsc0JBQXNCLENBQUMsQ0FBQTtJQUV2RCx3Q0FBd0M7SUFDeEMsSUFBRyxLQUFLLENBQUMsUUFBUSxLQUFLLDBCQUEwQixFQUFDO1FBQzdDLE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQztLQUNwRDtJQUVELHlCQUF5QjtJQUN6QixNQUFNLE1BQU0sR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO0lBRTlCLElBQUksTUFBTSxHQUFHO1FBQ1QsU0FBUyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVTtRQUNqQyxJQUFJLEVBQUU7WUFDSixJQUFJLEVBQUcsRUFBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBQztZQUN6QixJQUFJLEVBQUcsRUFBQyxDQUFDLEVBQUUsc0JBQXNCLEVBQUM7WUFDbEMsU0FBUyxFQUFHLEVBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUM7WUFDOUIsSUFBSSxFQUFFLEVBQUMsQ0FBQyxFQUFFLHNCQUFzQixFQUFDO1lBQ2pDLFFBQVEsRUFBRSxFQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFDO1lBQzNCLGFBQWEsRUFBRSxFQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsV0FBVyxFQUFDO1lBQ3JDLFdBQVcsRUFBRSxFQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsU0FBUyxFQUFDO1lBQ2pDLG9CQUFvQixFQUFFLEVBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBQztTQUNyQztLQUNGLENBQUM7SUFFSiw2Q0FBNkM7SUFDN0MsSUFBSSxNQUFNLEdBQUcsTUFBTSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO1FBQ3ZFLE1BQU0sSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekIsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7SUFDaEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUdwQixPQUFPO1FBQ0wsTUFBTSxFQUFFLElBQUk7UUFDWixVQUFVLEVBQUUsc0JBQXNCO0tBQ25DLENBQUE7QUFDSCxDQUFDLENBQUM7QUFFRixTQUFTLE1BQU0sQ0FBQyxDQUFRO0lBQ3RCLElBQUksTUFBVSxDQUFDO0lBRWYsS0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUM7UUFDL0IsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3REO0lBRUQsT0FBTyxFQUFFLEdBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM3QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBEeW5hbW9EQiB9ID0gcmVxdWlyZSgnYXdzLXNkaycpO1xuZXhwb3J0IHt9O1xuXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIGZ1bmN0aW9uKGV2ZW50OmFueSkge1xuICBjb25zb2xlLmxvZyhcInJlcXVlc3Q6XCIsIEpTT04uc3RyaW5naWZ5KGV2ZW50LCB1bmRlZmluZWQsIDIpKTtcblxuICBsZXQgY2FyUmVudGFsUmVzZXJ2YXRpb25JRCA9IGhhc2hJdCgnJytldmVudC5yZW50YWxfZnJvbStldmVudC5yZW50YWxfdG8pO1xuICBjb25zb2xlLmxvZyhcImNhclJlc2VydmF0aW9uSUQ6XCIsY2FyUmVudGFsUmVzZXJ2YXRpb25JRClcblxuICAvLyBQYXNzIHRoZSBwYXJhbWV0ZXIgdG8gZmFpbCB0aGlzIHN0ZXAgXG4gIGlmKGV2ZW50LnJ1bl90eXBlID09PSAnZmFpbENhclJlbnRhbFJlc2VydmF0aW9uJyl7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBib29rIHRoZSBjYXIgcmVudGFsJyk7XG4gIH1cblxuICAvLyBjcmVhdGUgQVdTIFNESyBjbGllbnRzXG4gIGNvbnN0IGR5bmFtbyA9IG5ldyBEeW5hbW9EQigpO1xuXG4gIHZhciBwYXJhbXMgPSB7XG4gICAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LlRBQkxFX05BTUUsXG4gICAgICBJdGVtOiB7XG4gICAgICAgICdwaycgOiB7UzogZXZlbnQudHJpcF9pZH0sXG4gICAgICAgICdzaycgOiB7UzogY2FyUmVudGFsUmVzZXJ2YXRpb25JRH0sXG4gICAgICAgICd0cmlwX2lkJyA6IHtTOiBldmVudC50cmlwX2lkfSxcbiAgICAgICAgJ2lkJzoge1M6IGNhclJlbnRhbFJlc2VydmF0aW9uSUR9LFxuICAgICAgICAncmVudGFsJzoge1M6IGV2ZW50LnJlbnRhbH0sXG4gICAgICAgICdyZW50YWxfZnJvbSc6IHtTOiBldmVudC5yZW50YWxfZnJvbX0sXG4gICAgICAgICdyZW50YWxfdG8nOiB7UzogZXZlbnQucmVudGFsX3RvfSxcbiAgICAgICAgJ3RyYW5zYWN0aW9uX3N0YXR1cyc6IHtTOiAncGVuZGluZyd9XG4gICAgICB9XG4gICAgfTtcbiAgXG4gIC8vIENhbGwgRHluYW1vREIgdG8gYWRkIHRoZSBpdGVtIHRvIHRoZSB0YWJsZVxuICBsZXQgcmVzdWx0ID0gYXdhaXQgZHluYW1vLnB1dEl0ZW0ocGFyYW1zKS5wcm9taXNlKCkuY2F0Y2goKGVycm9yOiBhbnkpID0+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuICB9KTtcblxuICBjb25zb2xlLmxvZygnaW5zZXJ0ZWQgY2FyIHJlbnRhbCByZXNlcnZhdGlvbjonKTtcbiAgY29uc29sZS5sb2cocmVzdWx0KTtcblxuIFxuICByZXR1cm4ge1xuICAgIHN0YXR1czogXCJva1wiLFxuICAgIGJvb2tpbmdfaWQ6IGNhclJlbnRhbFJlc2VydmF0aW9uSURcbiAgfVxufTtcblxuZnVuY3Rpb24gaGFzaEl0KHM6c3RyaW5nKSB7XG4gIGxldCBteUhhc2g6YW55O1xuXG4gIGZvcihsZXQgaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSsrKXtcbiAgICBteUhhc2ggPSBNYXRoLmltdWwoMzEsIG15SGFzaCkgKyBzLmNoYXJDb2RlQXQoaSkgfCAwO1xuICB9XG5cbiAgcmV0dXJuICcnK01hdGguYWJzKG15SGFzaCk7XG59Il19